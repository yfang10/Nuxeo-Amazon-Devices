/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.78
 * Generated at: 2023-08-28 07:50:44 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.ui;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import java.util.List;
import java.lang.management.ManagementFactory;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import org.nuxeo.connect.packages.PackageManager;
import org.nuxeo.connect.update.PackageType;
import org.nuxeo.ecm.web.resources.api.Resource;
import org.nuxeo.ecm.web.resources.api.ResourceContextImpl;
import org.nuxeo.ecm.web.resources.api.service.WebResourceManager;
import org.nuxeo.ecm.core.api.repository.Repository;
import org.nuxeo.ecm.core.api.repository.RepositoryManager;
import org.nuxeo.runtime.api.Framework;
import org.nuxeo.runtime.services.config.ConfigurationService;

public final class config_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("org.nuxeo.ecm.web.resources.api.service.WebResourceManager");
    _jspx_imports_classes.add("java.nio.file.Files");
    _jspx_imports_classes.add("org.nuxeo.connect.packages.PackageManager");
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("org.nuxeo.ecm.core.api.repository.Repository");
    _jspx_imports_classes.add("java.nio.file.Paths");
    _jspx_imports_classes.add("org.nuxeo.ecm.web.resources.api.Resource");
    _jspx_imports_classes.add("org.nuxeo.runtime.api.Framework");
    _jspx_imports_classes.add("org.nuxeo.connect.update.PackageType");
    _jspx_imports_classes.add("org.nuxeo.ecm.core.api.repository.RepositoryManager");
    _jspx_imports_classes.add("java.lang.management.ManagementFactory");
    _jspx_imports_classes.add("java.nio.file.Path");
    _jspx_imports_classes.add("org.nuxeo.ecm.web.resources.api.ResourceContextImpl");
    _jspx_imports_classes.add("org.nuxeo.runtime.services.config.ConfigurationService");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/javascript; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;


  WebResourceManager wrm = Framework.getService(WebResourceManager.class);
  ConfigurationService cs = Framework.getService(ConfigurationService.class);
  PackageManager pm = Framework.getService(PackageManager.class);
  String context = request.getContextPath();
  RepositoryManager rm = Framework.getService(RepositoryManager.class);
  String defaultRepository = rm.getDefaultRepositoryName();

      out.write("\n");
      out.write("\n");
      out.write("var Nuxeo = Nuxeo || {};\n");
      out.write("Nuxeo.UI = Nuxeo.UI || {};\n");
      out.write("Nuxeo.UI.config = ");
      out.print( cs.getPropertiesAsJson("org.nuxeo.web.ui") );
      out.write(";\n");
      out.write("Nuxeo.UI.bundles = [\n");
      out.write("  ");
 for (Resource resource : wrm.getResources(new ResourceContextImpl(), "web-ui", "import")) { 
      out.write("\n");
      out.write("  '");
      out.print( context );
      out.print( resource.getURI() );
      out.write("',\n");
      out.write("  ");
 } 
 for (String pn : pm.listInstalledPackagesNames(PackageType.ADDON)) {
    if (Files.exists(Paths.get("nxserver/nuxeo.war/ui/" + pn + ".bundle.js"))) { 
      out.write("\n");
      out.write("      '");
      out.print( pn );
      out.write("',\n");
      out.write("    ");
 } else if (Files.exists(Paths.get("nxserver/nuxeo.war/ui/" + pn + ".html"))) { 
      out.write("\n");
      out.write("      '");
      out.print( context );
      out.print( "/ui/" + pn + ".html" );
      out.write("',\n");
      out.write("    ");
 } 
 } 
      out.write("\n");
      out.write("];\n");
      out.write("Nuxeo.UI.repositories = [\n");
      out.write("  ");
 for (Repository repo : rm.getRepositories()) { 
 if (!repo.isHeadless()) { 
      out.write("\n");
      out.write("      {\n");
      out.write("        name: '");
      out.print( repo.getName() );
      out.write("',\n");
      out.write("        label: '");
      out.print( repo.getLabel() );
      out.write("',\n");
      out.write("        href: '");
      out.print( context + "/repo/" + repo.getName() + "/ui/" );
      out.write("',\n");
      out.write("        isDefault: ");
      out.print( defaultRepository.equals(repo.getName()) );
      out.write(",\n");
      out.write("      },\n");
      out.write("    ");
  } 
 } 
      out.write("\n");
      out.write("];\n");
 if (Files.exists(Paths.get("nxserver/nuxeo.war/ui/routing.html"))) { 
      out.write("\n");
      out.write("  if (!Nuxeo.UI.config.router) {\n");
      out.write("    Nuxeo.UI.config.router = {};\n");
      out.write("  }\n");
      out.write("  if (Nuxeo.UI.config.router.htmlImport === undefined) {\n");
      out.write("    Nuxeo.UI.config.router.htmlImport = true;\n");
      out.write("  }\n");
 } 
 if (!Framework.isDevModeSet()) { 
      out.write("\n");
      out.write("  if ('serviceWorker' in navigator) {\n");
      out.write("    window.addEventListener('load', function () {\n");
      out.write("      navigator.serviceWorker.register('sw.js?ts=");
      out.print( ManagementFactory.getRuntimeMXBean().getStartTime() );
      out.write("');\n");
      out.write("    });\n");
      out.write("  }\n");
 } 
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
