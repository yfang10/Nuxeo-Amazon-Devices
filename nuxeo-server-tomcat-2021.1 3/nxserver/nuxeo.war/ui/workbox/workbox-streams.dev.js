this.workbox=this.workbox||{},this.workbox.streams=function(e,r,n){"use strict";try{self.workbox.v["workbox:streams:3.6.3"]=1}catch(e){}function t(e){n.assert.isArray(e,{moduleName:"workbox-streams",funcName:"concatenate",paramName:"sourcePromises"});const t=e.map((e=>Promise.resolve(e).then((e=>function(e){return e.body&&e.body.getReader?e.body.getReader():e.getReader?e.getReader():new Response(e).body.getReader()}(e)))));let o,s;const a=new Promise(((e,r)=>{o=e,s=r}));let c=0;const l=[];return{done:a,stream:new ReadableStream({pull(n){return t[c].then((e=>e.read())).then((s=>{if(s.done){if(l.push(["Reached the end of source:",e[c]]),c++,c>=t.length){r.logger.groupCollapsed(`Concatenating ${t.length} sources.`);for(const e of l)Array.isArray(e)?r.logger.log(...e):r.logger.log(e);return r.logger.log("Finished reading all sources."),r.logger.groupEnd(),n.close(),void o()}return this.pull(n)}n.enqueue(s.value)})).catch((e=>{throw r.logger.error("An error occurred:",e),s(e),e}))},cancel(){r.logger.warn("The ReadableStream was cancelled."),o()}})}}function o(e={}){const r=new Headers(e);return r.has("content-type")||r.set("content-type","text/html"),r}function s(e,r){const{done:n,stream:s}=t(e),a=o(r);return{done:n,response:new Response(s,{headers:a})}}let a;function c(){if(void 0===a)try{new ReadableStream({start(){}}),a=!0}catch(e){a=!1}return a}return e.concatenate=t,e.concatenateToResponse=s,e.isSupported=c,e.strategy=function(e,n){return t=babelHelpers.asyncToGenerator((function*({event:t,url:a,params:l}){if(c()){const{done:r,response:o}=s(e.map((function(e){return e({event:t,url:a,params:l})})),n);return t.waitUntil(r),o}r.logger.log("The current browser doesn't support creating response streams. Falling back to non-streaming response instead.");const u=yield Promise.all(e.map((function(e){return e({event:t,url:a,params:l})})).map((i=babelHelpers.asyncToGenerator((function*(e){const r=yield e;return r instanceof Response?r.blob():r})),function(e){return i.apply(this,arguments)})));var i;const d=o(n);return new Response(new Blob(u),{headers:d})})),function(e){return t.apply(this,arguments)};var t},e}({},workbox.core._private,workbox.core._private);