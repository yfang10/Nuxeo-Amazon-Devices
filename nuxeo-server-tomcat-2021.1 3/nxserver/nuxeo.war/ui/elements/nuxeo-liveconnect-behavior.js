export const LiveConnectBehavior={properties:{clientId:{type:String},authorizationURL:{type:String},providerId:{type:String},userId:{type:String},isUserAuthorized:{type:Boolean,value:!1,notify:!0},isAvailable:{type:Boolean,value:!1,notify:!0}},generateBlobKey(e){if(!this.providerId)throw new Error("failed to generate key: providerId not defined");if(!this.userId)throw new Error("failed to generate key: userId not defined");if(!e)throw new Error("failed to generate key: fileId not defined");return`${this.providerId}:${this.userId}:${e}`},notifyBlobPick(e){this.fire("nx-blob-picked",{blobs:Array.isArray(e)?e:[e]})},openPopup(e,t){const i={width:"1000",height:"650",onClose(){},onMessageReceive(){}};t&&Object.assign(i,t);const o=window.screenX+window.outerWidth/2-i.width/2,r=window.screenY+window.outerHeight/2-i.height/2;let n;"function"==typeof i.onMessageReceive&&(n=function(e){i.onMessageReceive(e)},window.addEventListener("message",n));const s=window.open(e,"popup",`height=${i.height},width=${i.width},top=${r},left=${o}`),h=setInterval((()=>{s&&s.closed&&(clearInterval(h),"function"==typeof i.onClose&&i.onClose(),window.removeEventListener("message",n))}),100)},updateProviderInfo(){if(!this.$.oauth2)throw new Error("Missing OAuth2 resource");return this.$.oauth2.path=`oauth2/provider/${this.providerId}`,this.$.oauth2.get().then((e=>{this.clientId=e.clientId,this.authorizationURL=e.authorizationURL,this.isUserAuthorized=e.isAuthorized,this.userId=e.userId,this.isAvailable=e.isAvailable}))},getToken(){if(!this.$.oauth2)throw new Error("Missing OAuth2 resource");return this.$.oauth2.path=`oauth2/provider/${this.providerId}/token`,this.$.oauth2.get()},openPicker(){throw new Error("not implemented")}};