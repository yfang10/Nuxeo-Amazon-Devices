let GLTFLoader=function(e){this.manager=void 0!==e?e:THREE.DefaultLoadingManager};GLTFLoader.prototype={constructor:GLTFLoader,load:function(e,r,a,s){var i=this;new THREE.FileLoader(i.manager).load(e,(function(e){r(i.parse(JSON.parse(e)))}),a,s)},setCrossOrigin:function(e){this.crossOrigin=e},parse:function(e){function r(e){for(var r=atob(e),a=new ArrayBuffer(r.length),s=new Uint8Array(a),i=0;i<r.length;i++)s[i]=r.charCodeAt(i);return a}console.time("GLTFLoader");var a={buffers:{},bufferViews:{},accessors:{},textures:{},materials:{},meshes:{},nodes:{},scenes:{}},s=e.buffers;for(var i in s){var n=s[i];if("arraybuffer"===n.type){var t="data:application/octet-stream;base64,";0===n.uri.indexOf(t)&&(a.buffers[i]=r(n.uri.substr(t.length)))}}var o=e.bufferViews;for(var f in o){var c=o[f],u=a.buffers[c.buffer];a.bufferViews[f]=u.slice(c.byteOffset,c.byteOffset+c.byteLength)}var l={5120:Int8Array,5121:Uint8Array,5122:Int16Array,5123:Uint16Array,5125:Uint32Array,5126:Float32Array},m={SCALAR:1,VEC2:2,VEC3:3,VEC4:4,MAT2:4,MAT3:9,MAT4:16},d=e.accessors;for(var p in d){var v=d[p],E=(u=a.bufferViews[v.bufferView],m[v.type]),T=new(0,l[v.componentType])(u,v.byteOffset,v.count*E);a.accessors[p]=new THREE.BufferAttribute(T,E)}var y={9728:THREE.NearestFilter,9729:THREE.LinearFilter,9984:THREE.NearestMipMapNearestFilter,9985:THREE.LinearMipMapNearestFilter,9986:THREE.NearestMipMapLinearFilter,9987:THREE.LinearMipMapLinearFilter},A={33071:THREE.ClampToEdgeWrapping,33648:THREE.MirroredRepeatWrapping,10497:THREE.RepeatWrapping},h=e.textures;for(var g in h){var b=h[g],R=new THREE.Texture;if(R.flipY=!1,b.source){var w=e.images[b.source];R.image=new Image,R.image.src=w.uri,R.needsUpdate=!0}if(b.sampler){var L=e.samplers[b.sampler];R.magFilter=y[L.magFilter],R.minFilter=y[L.minFilter],R.wrapS=A[L.wrapS],R.wrapT=A[L.wrapT]}a.textures[g]=R}var H=e.materials;for(var F in H){var M=H[F],O=new THREE.MeshPhongMaterial;O.name=M.name;var x=M.values;Array.isArray(x.diffuse)?O.color.fromArray(x.diffuse):"string"==typeof x.diffuse&&(O.map=a.textures[x.diffuse]),Array.isArray(x.emission)&&O.emissive.fromArray(x.emission),Array.isArray(x.specular)&&O.specular.fromArray(x.specular),void 0!==x.shininess&&(O.shininess=x.shininess),a.materials[F]=O}var G=e.meshes;for(var C in G){var N=G[C];(_=new THREE.Group).name=N.name;for(var V=N.primitives,I=0;I<V.length;I++){var S=V[I],U=S.attributes,B=new THREE.BufferGeometry;for(var W in S.indices&&B.setIndex(a.accessors[S.indices]),U){var k=U[W],q=a.accessors[k];switch(W){case"POSITION":B.setAttribute("position",q);break;case"NORMAL":B.setAttribute("normal",q);break;case"TEXCOORD_0":B.setAttribute("uv",q)}}M=a.materials[S.material],_.add(new THREE.Mesh(B,M))}a.meshes[C]=_}var D=e.nodes,P=new THREE.Matrix4;for(var J in D){var X=D[J],Y=new THREE.Group;if(Y.name=X.name,void 0!==X.translation&&Y.position.fromArray(X.translation),void 0!==X.rotation&&Y.quaternion.fromArray(X.rotation),void 0!==X.scale&&Y.scale.fromArray(X.scale),void 0!==X.matrix&&(P.fromArray(X.matrix),P.decompose(Y.position,Y.quaternion,Y.scale)),void 0!==X.meshes)for(I=0;I<X.meshes.length;I++){C=X.meshes[I];var _=a.meshes[C];Y.add(_.clone())}a.nodes[J]=Y}for(var J in D)for(X=D[J],I=0;I<X.children.length;I++){var j=X.children[I];a.nodes[J].add(a.nodes[j])}var z=e.scenes;for(var K in z){var Q=z[K],Z=new THREE.Scene;for(I=0;I<Q.nodes.length;I++)X=Q.nodes[I],Z.add(a.nodes[X]);a.scenes[K]=Z}return console.timeEnd("GLTFLoader"),{scene:a.scenes[e.scene]}}};export{GLTFLoader};